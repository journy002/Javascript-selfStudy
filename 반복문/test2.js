// while과 for반복문

// 개발을 하다 보면 여러 동작을 반복해야 하는 경우가 종종 생깁니다.

// 상품 목록에서 상품을 차례대로 출력하거나 숫자를 1부터 10까지 하나씩 증가시키면서 동일한 코드를 반복 실행해야 하는 경우같이 말이죠.

// 반복문(loop) 을 사용하면 동일한 코드를 여러 번 반복할 수 있습니다.

// ** 'while' 반복문 ** //

// while(condition) {
//     // 코드
//     // '반복문 본문(body)'이라 불림
// }

// condition(조건)이 truthy이면 반복문 본문의 코드가 실행됩니다.
// 아래 반복문은 조건 i < 3을 만족할 동안 i를 출력합니다.

let i = 0
while (i < 3) {
  console.log(i, 'while 반복문')
  i++
}

// 반복문 본문이 한 번 실행되는 것을 반복(iteration, 이터레이션) 이라고 부릅니다. 위 예시에선 반복문이 세 번의 이터레이션을 만듭니다.

// i++가 없었다면 이론적으로 반복문이 영원히 반복되었을 겁니다. 그런데 브라우저는 이런 무한 반복을 멈추게 해주는 실질적인 수단을 제공합니다. 서버 사이드 자바스크립트도 이런 수단을 제공해 주므로 무한으로 반복되는 프로세스를 죽일 수 있습니다.

// 반복문 조건엔 비교뿐만 아니라 모든 종류의 표현식, 변수가 올 수 있습니다. 조건은 while에 의해 평가되고, 평가 후엔 불린값으로 변경됩니다.



// ** 'do ...while' 반복문 ** //
// do..while 문법을 사용하면 condition을 반복문 본문 아래로 옮길 수 있습니다.

// do {
//     // 반복문 본문
//   } while (condition);

// 예시
let j = 0
do {
  console.log(j, 'do ...while')
  j++
} while (j < 3)

// do..while 문법은 조건이 truthy 인지 아닌지에 상관없이, 본문을 최소한 한번이라도 실행하고 싶을 때만 사용해야 합니다.
//  대다수의 상황에선 do..while보다 while(…) {…}이 적합합니다.



// ** 'for' 반복문 ** //

// for 반복문은 while 반복문보다는 복잡하지만 가장 많이 쓰이는 반복문입니다.

// for (begin; condition; step) {
//   // ... 반복문 본문 ...
// }

for (let i = 0; i < 3; i++) {
  console.log(i, 'for 반복문')
}

// 구성 요소

// begin i = 0; 반복문에 진입할 때 단 한번 실행됩니다.
// condition i < 3 반복마다 해당 조건이 확인됩니다. false면 반복문이 멈춥니다.
// body console.log(i) condition이 truthy일 동안 계속해서 실행됩니다.
// step i++ 각 반복의 body가 실행된 이후에 실행됩니다.

// 일반적인 반복문 알고리즘

// begin을 실행함
// → (condition이 truthy이면 → body를 실행한 후, step을 실행함)
// → (condition이 truthy이면 → body를 실행한 후, step을 실행함)
// → (condition이 truthy이면 → body를 실행한 후, step을 실행함)
// → ...

// begin이 한 차례 실행된 이후에, condition 확인과 body, step이 계속해서 반복 실행되죠.

// 반복문을 처음 배우신다면, 위 예시를 실행했을 때 어떤 과정을 거쳐 얼럿 창이 출력되는지 종이에 적어가며 공부해보세요. 이렇게 하면 반복문을 쉽게 이해할 수 있습니다.

// 정확히 어떤 과정을 거치는지는 아래 예시에서 확인할 수 있습니다.

// ** 인라인 변수 선언 ** //

// for(let i = 0; i < 3; i++) {
//     console.log(i) // 0, 1, 2
// }
// console.log(i) // Error: i is not defined

// 인라인 변수 선언 대신, 정의되어 있는 변수를 사용할 수 있습니다.
let k = 0
for (k = 0; k < 3; k ++) {
    console.log(k, 'for k') // 0, 1, 2
}
console.log(k , 'out of for kkk') // 3

// ** 구성 요소 생략하기 ** //
// for문의 구성 요소를 생략하는 것도 가능합니다.
// 반복문이 시작될 때 아무것도 할 필요가 없으면 begin을 생략하는 것이 가능하죠.

let o = 0;

for (; o < 3; o++) {
    console.log(o, 'for o') // 0,1,2
}



// ** 반복문 빠져나오기 (break) ** //

// 대개는 반복문의 조건이 falsy가 되면 반복문이 종료됩니다.

// 그런데 특별한 지시자인 break를 사용하면 언제든 원하는 때에 반복문을 빠져나올 수 있습니다.

// 아래 예시의 반복문은 사용자에게 일련의 숫자를 입력하도록 안내하고, 사용자가 아무런 값도 입력하지 않으면 반복문을 '종료’합니다.

let summ = 0

while(true) {
    let valuee = +prompt('숫자를 입력하세요.')

    if(!valuee) break // (*)

    summ += valuee
    
}
console.log('합계: ' + summ)

// (*)로 표시한 줄에 있는 break는 사용자가 아무것도 입력하지 않거나 Cancel버튼을 눌렀을 때 활성화됩니다.

// 이때 반복문이 즉시 중단되고 제어 흐름이 반복문 아래 첫 번째 줄로 이동합니다. 여기선 alert가 그 첫 번째 줄이 되겠죠.

// 반복문의 시작 지점이나 끝 지점에서 조건을 확인하는 것이 아니라 본문 가운데 혹은 본문 여러 곳에서 조건을 확인해야 하는 경우, '무한 반복문 + break’ 조합을 사용하면 좋습니다.


// ** 다음 반복으로 넘어가기 (continue) ** //

// continue 지시자는 break의 '가벼운 버전’입니다. continue는 전체 반복문을 멈추지 않습니다.

// 대신에 현재 실행 중인 이터레이션을 멈추고 반복문이 다음 이터레이션을 강제로 실행시키도록 합니다(조건을 통과할 때).

// continue는 현재 반복을 종료시키고 다음 반복으로 넘어가고 싶을 때 사용할 수 있습니다.

for (let m = 0; m < 10; m++) {

    if(m % 2 === 0) continue

    console.log(m , ' continue 홀수 구하기 ')
}
// i가 짝수이면 continue가 본문 실행을 중단시키고 다음 이터레이션이 실행되게 합니다(i가 하나 증가하고, 다음 반복이 실행됨).
//  따라서 alert 함수는 인수가 홀수일 때만 호출됩니다.

// continue는 중첩을 줄이는 데 도움을 줍니다. 
for (let n = 0; n < 10; n++) {
    if(n % 3) {
        console.log(n ,' 조건문으로 홀수 구하기 ')
    }
}

// ** 여러 개의 중첩 반복문을 한 번에 빠져 나오기 labelName ** //

// 예시
outer : for (let x = 0; x < 3; x++) {
    for (let y = 0; y < 3; y++) {
        let input = prompt(`(${x},${y})의 값,`, '여기에는 뭐가 들어오나')
        // 사용자가 아무것도 입력하지 않거나 Cancel 버튼을 누르면 두 반복문 모두를 빠져나옵니다.
        if(!input) break outer 

        console.log(input , ' 중복 for문 값 ')
    }
}
console.log('중복 for문을 잘 빠져나옴')

// 레이블을 사용한다고 해서 원하는 곳으로 마음대로 점프할 수 있는 것은 아닙니다.

// 아래 예시처럼 레이블을 사용하는 것은 불가능합니다.

// break label; // 아래 for 문으로 점프할 수 없습니다.

// label: for (...)
// break와 continue는 반복문 안에서만 사용할 수 있고, 레이블은 반드시 break이나 continue 지시자 위에 있어야 합니다.


// 사용자가 유효한 값을 입력할 때까지 프롬프트 창 띄우기
// 사용자가 오직 숫자만 입력한다고 가정하고 답안 작성
while(true) {
    let userVal = prompt('100보다 큰 숫자를 입력하세요.')

    if(userVal > 100) {
        console.log('잘하셨습니다!')
        break;
    }
}

// do..while반복문을 사용해 아래 두 조건이 모두 truthy인 경우 프롬프트 창이 뜨게 하면 됩니다.

// num <= 100인지 확인하기. 100보다 작거나 같은 값을 입력한 경우 프롬프트 창이 떠야 합니다.
// num이 null이나 빈 문자열인지 확인하기. num이 null이나 빈 문자열이면 && num이 거짓이 되므로 while 반복문이 종료됩니다.
// 참고: num이 null인 경우 num <= 100은 true가 되므로 두 번째 조건이 없으면 취소 버튼을 눌러도 반복문이 계속해서 실행됩니다. 따라서 위 두 조건을 모두 확인해야 합니다.

let doNum
do {
    doNum = prompt('100 이상의 숫자를 입력하세요.')
    alert('100보다 작은 숫자를 입력하였습니다!')
} while(doNum <= 100 && doNum)